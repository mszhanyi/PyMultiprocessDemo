{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "committed-cocktail",
   "metadata": {},
   "source": [
    "The notebook is referened from https://medium.com/speechmatics/how-to-build-a-streaming-dataloader-with-pytorch-a66dd891d9dd\n",
    "It's a good article to understand DataLoader process.\n",
    "This notebook should be running on Linux."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "statutory-quilt",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import time\n",
    "import torch\n",
    "\n",
    "from itertools import *\n",
    "from matplotlib.patches import Rectangle\n",
    "from torch.utils.data import DataLoader, Dataset, IterableDataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "incomplete-mention",
   "metadata": {},
   "outputs": [],
   "source": [
    "class MyMapDataset(Dataset):\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        worker = torch.utils.data.get_worker_info()\n",
    "        worker_id = worker.id if worker is not None else -1\n",
    "        \n",
    "        start = time.time()\n",
    "        time.sleep(0.1)\n",
    "        end = time.time()\n",
    "        \n",
    "        return self.data[idx], worker_id, start, end\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "qualified-scanner",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = list(range(17))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "exterior-graduate",
   "metadata": {},
   "outputs": [],
   "source": [
    "# copy from https://gist.github.com/david-macleod/2b933d28fd3ac09766785728ee191f09#file-plot_timings-py\n",
    "def plot_timings(loader, n_batches, model_time=0.2, max_time=2.5):\n",
    "    \n",
    "    fig, ax = plt.subplots()\n",
    "    ax.set_axisbelow(True)\n",
    "    ax.yaxis.grid(which=\"major\", color='black', linewidth=1)\n",
    "    \n",
    "    zero_time = time.time()\n",
    "    \n",
    "    worker_ids = {}\n",
    "    worker_count = count()\n",
    "        \n",
    "    for result in islice(loader, n_batches):\n",
    "        start = time.time()\n",
    "        time.sleep(model_time)\n",
    "        end = time.time()\n",
    "                \n",
    "        # check if already batched\n",
    "        if isinstance(result[0], torch.Tensor):\n",
    "            result = zip(*result)\n",
    "            \n",
    "        batch = []\n",
    "        for item in result:\n",
    "            data, worker, t1, t2 = tuple(map(scalar, item))\n",
    "            \n",
    "            # fix worker position in plot\n",
    "            if worker != -1:\n",
    "                if worker not in worker_ids:\n",
    "                    worker_ids[worker] = next(worker_count)\n",
    "                worker = worker_ids[worker]\n",
    "   \n",
    "            plot_time_box(data, worker, t1-zero_time, t2-zero_time, ax)\n",
    "            batch.append(data)\n",
    "        \n",
    "        batch_str = \",\".join(map(str, batch))\n",
    "        plot_time_box(batch_str, -1, start-zero_time, end-zero_time, ax, color='firebrick')\n",
    "    \n",
    "    max_worker = len(worker_ids) - 1 \n",
    "        \n",
    "    ax.set_xlim(0, max_time)\n",
    "    ax.set_ylim(-1.5, max_worker + 0.5)\n",
    "    ax.set_xticks(np.arange(0, max_time, 0.2))\n",
    "    ax.set_yticks(np.arange(-1, max_worker+1, 1))\n",
    "    ax.set_yticklabels([])\n",
    "    ax.tick_params(axis='y', colors=(0,0,0,0))\n",
    "    \n",
    "    fig.set_figwidth(16)\n",
    "    fig.set_figheight((max_worker + 2) * 0.5)\n",
    "    \n",
    "    ax.xaxis.label.set_color('gray')\n",
    "    ax.tick_params(axis='x', colors='gray')\n",
    "    for spine in ax.spines.values():\n",
    "        spine.set_edgecolor((0,0,0,0))\n",
    "        \n",
    "def scalar(x):\n",
    "    return x.item() if hasattr(x, 'item') else x\n",
    "\n",
    "def plot_time_box(data, worker, t1, t2, ax, color='steelblue'):\n",
    "    x = t1\n",
    "    y = worker - 0.25\n",
    "    w = t2 - t1\n",
    "    h = 0.6\n",
    "    \n",
    "    rect = Rectangle((x, y), w, h, linewidth=2, edgecolor='black',facecolor=color)\n",
    "    \n",
    "    ax.add_patch(rect)\n",
    "    \n",
    "    ax.text(x + (w * 0.5), y + (h * 0.5), str(data), va='center', ha='center', color='white', weight='bold')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "filled-embassy",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x36 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "map_dataset = MyMapDataset(data)\n",
    "loader = DataLoader(map_dataset, batch_size=4, num_workers=0)\n",
    "plot_timings(loader, n_batches=4, model_time=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "christian-terrorism",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA5MAAABVCAYAAADUtrC9AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAhmElEQVR4nO3dd3xUVf7/8Vd6T0ihBBIgSC+hiV0EUbqoD5VVd2Xd1dW1/Sy47tdVvHtd+7qu+lUUC7IqdhERdK0QpEonJEBIIAktISEhhYT03x+T5AthJpmRMHdI3s/HIw9IcubOZz4587lz5px7xquurg4RERERERERV3hbHYCIiIiIiIiceTSYFBEREREREZdpMCkiIiIiIiIu02BSREREREREXKbBpIiIiIiIiLjM9xRvr61gRURERERE2i4vR7/QzKSIiIiIiIi4TINJERERERERcZkGkyIiIiIiIuKyU71m8iReXg6X1IqIiIi0WXV12kpCRNoXzUyKiIiIiIiIy1p9ZrLB+McXn65Du+S7x6YCiscRT4qnIZYGnhSTJ8QCiqcliqd5isex4+uPJ8QDnpUf8Kx4PCkWOPn8JSLSXmhmUkRERERERFx22mYmT8XAuEjumTyYuOgQsvJKeXHxVtJzii2L544JA7lkYFciQwNYm5bLYx+vtyyWrlHB3DclkYROYfj6eLNjfyEvf72Ng4VllsX00h8voHtMGN7eXmTnlTDn++1syy6wLB4APx9vXrv9YuKjQ1m0LpNX/5tiaTz/uWcsXToEN36fkVPEnW+usCSWkABf7pw4iPP6dsbH24v0g0U8+O4aS2K5PDGOB68cetLPZ7z8E7lF5RZEBFef05Orzk0gKjSAgpIKPl+7h0XrMi2JBWD80DhuuKg30WGBJGcX8MJXWzhcUuG2+3dU/+JjQnlgaiK9Y8PJLSpn9n9T2Lg737J4fnPhWUwd2YNOEUFkHirh9jnLT3ssjuIJC/TjoauG0Sc2gqAAX3bnFvPqN9vcch5zlJ9Hrx3B8IQY/H29OVhYxrvL0lixI8eyeBo8d9N5DO0Z7ZZzq6NYGmJoUHqsimv++d1pjUVEpK3wuJlJPx9vZl03gmB/X+Z8t53IkAAevXYk3hbv67Ms5YC1AdSLCQvEywveS0rjuy17GdGrI/dPTbQ0ptS9hbz2bQof/LyLs7qEc//UIZbGA/C70X3oGBZodRgn2Jp1mKcWbOSpBRt5+8cdlsXxwLShjB3cjW837eX1b1M5YOEbEVuz/y8nzy7cTGV1DQWlx8gvOWZJPF2jgvnzhEHU1cEb32/Hx8eLuyYOomO4NX2pT2wE91+RyOGSY7z94w4Se0Tx/ya7//llr/49fPUw4mNCeOP77dTU1PHoNSMIDnDP+5P24vH19uKn5P1uuf+mmsYTHOBLdFgAH6/K4JNVGfTv1oFZ1460LB6ArLwS3vx+O2/9sIOY8ED+cuVQvN20YZ6j8+ek4fH06xrhlhhaiiUrr6SxFr3w1Va3xiQicibzuMHkqN4diQoN5KsNWSzekMW3m/cSGxlMYo/olm98mrz2bSpfrN1j2f0fL3VvIX95dw2L1mfx2repFJdV0qNjqKUxzfl+O2vSctm8J5+q6lqs3swuoVMYV5+bwHtJu6wNpImcI2X8susQSSkH2eCGGRx7unQI4qL+XViWcoC5P+3guy17LX3hlHuknKSUgySlHKSyugZ/Xx++27yPmlprOlHDi+vDJcfYtCefwtIKKqtrqKyutSSeId2j8PbyYsnGbL5cl0l6TjHn9OlEWJCf22KwV//O6hLOWV0iWLrtAF+tz+LzNbsJCfTj4gGxlsQDMP/ndN5ZuvO0378z8eQVH+OuN1fwxdo9zF++i4ycYrpEBhPge/pPuY7y817SLlbuyGFzZj5Hj1XjrmeYo3iiQgO49bIBzFuW5qZImj+XHzla2VifV7phxlZEpK3wuGWuDUsBD9fPTOQV25a6xUYGsznzsGVxeYrq415k94mNIDzYn5+3H7QwItuyyU8fHA9ASXkV/15s3eDEC7h/aiJfrc8i7eARy+Kw57LEOMYPjefI0Qrm/rSTbzfvdXsMPTqGAdC3awRf/s9EauvqWPhLpqUzpQ2mjOhOTW0dX2/MtiyGfYeP8vaP2/nDpf15+84x1NTW8cJXWygqq7Qknob7HRwfRfrBIrpFheDt5UXniCBKyqssiQlOrtMNM8mxkcEOb9Oe1B73jlqniCDio0NIO3CECovelGgw756xhAb6UVldw7NfbD4hTne7a+IgNu3JZ9WOHP48fqBlcTQY0iOKhX+dyNGKKj5dtZsPV6RbHZKIyBnB42Ymm9LnVtoXHx2C+ZuzySksY7bF1wOWV9bw8PtrefW/Kfj7ejPjkr6WxTJ+WDydOwTxw9Z9RNcvcw0O8CUi2N+ymAD+u2kvT35uW8pZVVPLvVMG07lDkNvj8POxPeUD/Xx4asEmUvYWMv2CsxieYN3MP9gGIcMSYlifkWfZtZIAEcH+TBvVk4ycYv7+8Xp25xZz58RBxFi0ZHp56kG2ZRcw9ewevHXnGHx9bPWwqsbaQUlTqtL2RYYE8MQNo6iqqeX5RVusDgfzk/X8a9EWyiqq+f3Yfo31wN2G9YxmVO9OfLF2D50ibHUwwM+HqNAAS+JZsSOHZ7/YzD8+20B+8TFuHtuPwfGRlsQiInKm8biZyZwjtuu3Gl68Nfxr5QYznqZ7TCjP3nQuldW1PPT+GgpK3bcZhz21dXVs3JPPxj35XDygC8MSYggP8qPYgpmTjuGBdAgJ4PXbRzf+7LLEOKpqanlxcbLb42lw/LvcvTuHc835vYiLCiH3iHsHTg3Pr23ZBazckUNEsD/DE2KIjQxh0x7rZv4nj+huW865IcuyGAASe0TRMTyIJRuyWZ2WS89OYdw8th8D4jrw83b3L32rqqnlwf+sJqFzGDW1dfx5/EAGxUdZXg8b63S4bSAQrTp9kqjQAJ676Tw6hPjz8PxfyMortToktmYVsDWrgMQe0Vw+NI6encLYdbDI7XF0DA8iwM+HF26+oPFnwxJieOjKYfzP/LVuj+f4DbaiQgO5a+IguncMY9veQrfHIiJypjmlweTpmDVcl55HYWkFU0f2oLyymgnD4skpLGNrlnUvdM/p3YmenWzXJXaMCGLisHi2Zh/mQIH7Xzh1DA/kuZvOIzzYj3lL0+jfrQP9u3UgKcWapa4je8UwemBXUvcV0jE8kIFxkRSUHrNkIAm2mZzMvBLAtqRzxiV9WZd+iMXrrRukJNQPSNZn5OHt5cW4xG4cq6phz6ESt8eSnlPM7txihifEMGl4POOHxlFTW0vKXut23/X19mL80Dhy668ptVJO/eB+3JBuFJRWcOmQbgDsLzhqSTzeXnDb5QPJyCmmb9cIRvTqyOerd7v1Gk5H9W93bjFjBsWSlVfC1JE9OFpRxQo3LLl3FE9UaCBxUSEAhAb6MXFYPOk5Rad9B1V78ew4cIRZ144gLjqUT1Zl0DUqmK5RwaxJO0RFVY0l8dx4UW82Zx4m2N+XC/p3pqKqhhw3DP7txbO/4Cj/+GwDAB2C/bln8hDSDhzh/eWn9/pJe7GkHTzCHRMGsWpHDhXVtVx9Tk9qautIO3DkV92HVlOJSFtU18xlEac0mLR34FMtpFU1tTzx+UbunjSIP08YRFZeCS8uTsai/TgAuPb8Xo3bhvfqHM79VyTy/JdbLBlMxkYGE1m/FOiWcf0bf56UssTtsYDtGsn+3TowdnBXqmpqSdlbyFs/bLckFoDs/FKy820zAMX115sdLCyz9KNlisoq8fby4qZL+hLg50N2Xgnzlu60bEb5mS82cd/URO6cOIhDReX888stls6aXDigCx1CApi3dKfbNgVxZNfBIuZ8l8qVo3py96RBHC6p4JVvtrE71/0Df4C6Otts6ZSR3TlWWcOXv2S6fZMZR/WvoR/ddvkADhWV89TnmzhaUW1ZPIk9oxg/NB6AmPBA7r8ikfeS0k77c99RPHHRtkHL9AvOamzrjo+8sRfPu0lpdI0K4dw+naitg+z8Et5dlkbJsdP/pp+j/Hy/dR8AneuXuRaWVpz2mUB7sby8JJmiskqmX3gWIQF+5Bwp459fbv7V/aa5F1wiIm2Rxy1zBdsSvD/P+dnqMBo99J41n8Fnz9asAib8w5qBoz1pB4vc9nlurvKUXBWUVjDro3VWh9EoK6+U+99ZZXUYjWy7uVr/d2qwYO0eFnjI7s11YNnnkTZorv5Z0Y8cxfP91n38a5H7N/9qLh4rOIpn/nJrdrdu6fyZW1TutjrtKJYlFm76JSJypvP4DXhERERERETE82gwKSIiIiIiIi7TYFJERERERERc5nWKF4ufdGPtZCYiIiLtkTbgEZE2yuEATzOTIiIiIiIi4rJW381V78qJiIiIiIi0fZqZFBEREREREZdpMCkiIiIiIiIu02BSREREREREXKbBpIiIiIiIiLhMg0kRERERERFxmQaTIiIiIiIi4jINJkVERERERMRlGkyKiIiIiIiIy3ytDkDEES8vL6tDOCPU1dVZHYJHUb9xjvqNfeo/zlH/sU/9p2XqOyJti2YmRURERERExGWamRSPt6hXL6tD8EjTdu+2OgSPpn5jn/qNc9R/7FP/cY76z8nUd0TaJs1MioiIiIiIiMs0mBQRERERERGXaTAp7ULkyJFcsmQJk1NTGf3ll0QMGnRSG++AAM577z0mbd3KFRkZ9Lr1VofH6zxuHKO//JJJW7YwYd06hj7zDN4BAXbbxl11FZetWMGU7du5fM0aBv/973j5+LTaY5PTy9vfn7Hff88VGRkMNgy7bcYlJXFFRkbj1+ivvnJ4vMDYWEa9/jqTkpOZuHkzw194wW67Yc89d8Ixr8jIYFxSUqs8Jmk9CTffzLikJCanpjJu2TJ6zphht13vO+7gshUrmJSczIiXX8Y3NNRuu6DYWC785BMmp6ZyRUYGsRMnnvD7HjfcwGUrVjA5JYVRr7+OX4cOdo8TMXgwFy9cyJSdO7kiI4OIIUOcvg9pPYMee4zxa9dyRUYG57z5JgB+ERGc8/bbjF+7lsnbtnHhp58SMXiww2OMfOUVJmzcaLcGXfT550zasoXJ27Zx8cKFRI0aZfcYzpzf/KOimLBuXYvnv+bicaUWikjboMGktHne/v6c/eqr+IaEkPLkk/jHxDDylVfA+8Tu7+XjQ9WRIxxavrzFY4YPGEBJejopTz3FkW3b6H7ddfS+7Ta7bavLytg9dy5bHnmEsqwsEm66ia6TJ7fKY5PTr+899xDYpUuL7Q6vXcuGe+9lw733sv255xy2G/Xaa3S86CIy3nyT7c8+S2VBgd12mfPnNx5v50svAVCUkvLrHoScFiE9ezJ41izqamtJfeopvHx9GWIYBMbGntAudsIEBjz4IEeSk0l/7TW6TZlC/5kz7R7TOyCAsuxsCtatO+l34QMHkvjEE5RmZLDzpZfoNHYsgx591O5xfAICKEpNpTg11aX7kNa3f/HiE773DQ0lsFMn0l9/nfQ5c4gcNoyzX3nF4e1rKyvJ+e47u78r3LiRbY8/TtorrxA+YABDn37abjtnzm+DZs3COzCwxcfTXDzgfC0UkbZBg0lp8zqNGUNgx45kzp9P1vz57P30U0K6dyfmvPNOaFdTVsaGe+4hd+nSFo+ZPmcOm2bOJPvjj0mtP3mH9eljt23Od9+R9eGH5K1YQUlGBqCt0c8UYf360euPf2wczDWnbN8+cpcu5cDixeT9/LPdNtHnn0+HIUPImDuX9NdfJ+vDD0l54gm7bY9s2cKBxYs5sHgx/pGRAGR98MGvfzDS+uo/BuJYbi55K1dSkZ9PTUUFtRUVJzSLOvdcADLeeotds2dz7NAh4q6+2u4hj2ZmsunBBynYsOGk38Vfcw0A259/now33qBw40a6TZ2Kt7//SW0LNmxg69/+RsmuXS7dh7SulMcfZ/fcuSf87FhODsunTWP3O++Q9r//S1FqKsHx8fg4GMhteuAB9n3xhf3jP/kkuT/9RP6qVdRWVkJtrd12LZ3fOo0ZQ5dLLyV9zpwWH1Nz8YBztVBE2g4NJqXNC46LA2wncIDy+n+D4+N/9THrqqoa/99x9GgADjfzLn//mTMZv3o1PX7zG/YvXszBb7751fctbuLlxdCnnybz/fcpSk5usXnc1VczeetWxv/yC/HXXWe3TVjv3oBtpmpySgqTtmwh4fe/b/a4PoGBxF11FaWZmeStWOH645DT5uiePaQ++yxRI0dy6Q8/EDFwIFsfeeSk2eaG72POPZeIIUPwj4zELyzM4RJVRxprWW4uYKtl3n5+BHXteuoPRtymrqYG6t9QDOraldBevTiSnEzNsWMuH8s3LIwJ69dz8RdfUFtVxZaHH3b5GD7BwQx5/HG2P/885QcPunz7ppyphSLSdmgwKe1Oa36odOyECQyYOZPcpUvJnD/fYbvM99/nl9tuI+/nn4mdMIHo+pkK8Vzx115LcFwcexcsILBzZwD8wsLwj4o6qW32xx+z4Z572PjAA9RWVpL4xBME1b/wP17DDFJddTXr7riDsn37GPToo4T07Okwjq5Tp+IXHk72Rx+1zgOTVuMfFUXCjBkUp6byy+23U7x9O4MN46Rl0Vnz51OSnk7/mTMZvXBh48xl0xlMV7VmLRP3C4iJ4dy336a2spJNf/nLrzpGTVkZq2fMINk08QkIoN/997t8jN63305NeTl5P/9MQHQ0AP4dOuAXHu7ysZythSLSdpzS50zqRCZngrJ9+wAar2NqGBiU7d17SseNnTyZES+8QP7q1ay/806Hy4vAtqzsaGYm1UeP0vHii+ly+eXkr1p1SvffQM/D0yMoNpaA6GjGfP1148/irr6amspKtv7tbye03TV7duP/IwYO5KxbbyU0IYHy+r7XoKHP5S5dSu4PPxA5bBjh/fsTHB/P0cxMu3H0uPFGaioq2PvZZ630yGzUb05d9LnnEhQbS9aHH5L7ww+E9+tH/wceIHL48BNWH1QWFpI0dSrh/ftTXVLCOW++iXdRETXl5S7dX0MtC+rShYpDhwjs3JnaqirKDxxo1cflDPWfUxPQqRMXvP8+/tHRrLn5ZkrtLEd2Rl1NDfkrV5K/ciVdJ04k5vzz8Y+MpLKw0OljBMXGEta7N5f++GPjz/rccQc15eXsevVVl+Jxphaq74iceZq7POuUBpO67ktOp9Y64RxatoyK/Hx63ngj1aWlxF93HWV791K2bx9XZGSQ+9NP/PKnPwHQffp0IkeMACAyMZHu06ezv/6atcuWL29s22nMGEb8+99UFRWxf/FiuowfT8XhwxxevZq4a65h+HPPkfL00+x+6y2GP/88xWlpVB4+TPfrrwegJD29VR4b6HnYVGv1mwNff01JWhpgux623333cSgpiawPPmBcUhL+kZF8k5hIWL9+9J85k7zly/Hy8bENOMvLKd65E4ArMjIoTksjadIkDiUlUZGfT+zEiRzNyiJ24kSqS0spSk0lqFu3E/oY2DZciRw6lH0LF7r04tAZ6jf2udJ/GgZ3cVdeybFDh+g2bRpgW/56/N89oFMnEmbMoHTPHjqNHk1or14kmyZgG5Be8MEH7Hn3XbaZJj7BwXSbOrVxx+mYCy6wzUx/8gn7vviCXjffbOtvK1cSOWIEB776itrKypPqTkDHjnQeO7Zx1rvLZZcR0r07B5YsafY+nKX+Y1/T/tNpzBjC+vYFbG9odp8+ncLNmzl79mxCExJIf+MNQnr0IKRHD3J//JGa8vIT+g5A1ylTGnfjDevTh+7Tp5O7dCnh/fvTdfJkCjZuJCg2lsgRIziWl0dlYaHdeuLo/LbnvffI/eknwNYfE2bMYO+CBY1viDgbj39UVLO1sIH6jkjbckqDSZEzQW1lJevvvpshpsngWbMo2bWLLY88Ql39TGJdTU1j2+N3wus6ZQpdp0whb+XKxo02Gtp2SEzE29eXgOhohtfvVpe/Zg2rV6+m4aVEXXU1YNvN9axbb8U3NJSKvDx2zZ6tjVTOAKXp6ZTWD/obBnJHs7Io2rYNvLwa+0JlQQFePj70u/defIKCKElPZ8e//kXFoUONx2roC7UVFay/6y6GPP44Q0yT0owM1t15J5WHDzcuBTu+P/a44QZAG+94qqLkZFKefJKEGTMYYpocy80l2TAo3rED+L+/O7W1dLn8coLj46k6coSdL71E5rvv2n7XpLb4R0aeUId6/va3AGR/8glF27ax9bHH6HPnnUSNGsWhpCRSnnzSdpj69g33Gdqr1wnH6Xv33ZTt28eBJUuavQ9pXWf96U+Nm71F1O+2uumhhwhNSAA4YRfwH0aPpnz/fuC4vgMMeOihxutlY84/n5jzz2fVjTdSeeQIHYYNo9u0adRWVlKwYQOpzzxju1GTfgWOz29FycmN14X7hIQAULxzJ6W7dze2dyae0t27W6yFItL2aDAp7ULBunUkNfk4joaNc45/AfXVWWfZvX3Ttmkvv0zayy/bbRvSqxfVR49yYMkSAJIfe4zkxx47tQcgljq8dm1j3/AJCiKwc2f2zJsHQEVeHr/ccovd24X26gVA9qefNv6sYP36k/riCW2P64/Js2aRPGtWqzwGOT12z5170m6dTf/uFfn5LJswwe7tQxMSqKupYe/nnwNQvn+/wzoEtusvs+xcn9207hzfZ5tq6T6k9ayuH6g3ta/+792UvZrx4yWXODx+w2yhw+M4cX5rGtfxsbkaj6NaKCJtlzbgkXYrctgw8laubFze05pt0+fMoSIvrzXCFA/TITGR6uJi0pr5XLjGtsOHU5KebvfFf1Ou9DHxbC793YcPJ/uzzyjevv2U7lN1p21wpe80p7XqSWvFIyJtl9cprl3Xwnc5bRquPVlU/86onGha/RIkXX9yIvWb5qnfNE/9p3nqP81T/3FMfUfkjOZwQwENJsVjacc35+jEfCL1G+eo39in/uMc9R/71H9apr4jckZyWNy0zFVERERERERcpplJERERERERcUQzkyIiIiIiItJ6NJgUERERERERl2kwKSIiIiIiIi7TYFJERERERERcpsGkiIiIiIiIuOyUBpOmad6ObXcffTX5Um6UH+VG+VFuPOtL+VFulBvlR7nxnC/l54zKjUOnOjN52ynevi1Tbpqn/Dim3DRP+XFMuWme8uOYcuOYctM85ccx5aZ5yo9jZ0xutMxVREREREREXKbBpIiIiIiIiLjsVAeTb7RKFG2TctM85ccx5aZ5yo9jyk3zlB/HlBvHlJvmKT+OKTfNU34cO2Ny41VXV2d1DCIiIiIiInKG0TJXERERERERcZkGkyIiIiIiIuIyX2camaY5EXgJ8AHeMgzjmSa/DwDeBUYCh4HfGIaR2bqheiYncvMAcCtQDeQBfzQMI8vtgVqkpfwc1+4a4DNglGEY690YomWcyY1pmtOBvwN1wBbDMG50a5AWcuK51R34D9Chvs3/GIbxtbvjdDfTNOcCU4FDhmEMtvN7L2x5mwyUATcbhrHRvVFax4n8/Bb4K7bPzSoB7jAMY4t7o7RGS7k5rt0oYDVwvWEYn7krPqs5kx/TNMcALwJ+QL5hGJe4Kz4rOfG8igDeB7pje235vGEY77g3SmuYphmP7TVwZ2zn6jcMw3ipSZt2WZedzE17rskt5ue4th5bl1ucmTRN0wd4FZgEDARuME1zYJNmtwCFhmH0Bv4NPNvagXoiJ3OzCTjbMIxEbIOl59wbpXWczA+maYYB9wJr3RuhdZzJjWmafYCHgQsNwxgE3OfuOK3iZN95FPjEMIzhwPXAbPdGaZl5wMRmfj8J6FP/dRvwmhti8iTzaD4/e4BLDMMYAvyDM2iTg1Ywj+Zz0/Dcexb4zh0BeZh5NJMf0zQ7YKsz0+pr8nXuCcsjzKP5vnMXkGoYxlBgDPAv0zT93RCXJ6gGZhqGMRA4D7jLzvmqvdZlZ3LTnmuyM/nx+LrszDLXc4B0wzB2G4ZRCXwEXNmkzZXYZgjANmAaV/8uTFvXYm4Mw1hqGEZZ/bdrgDg3x2glZ/oO2IrHs8AxdwZnMWdy8yfgVcMwCgEMwzjk5hit5Ex+6oDw+v9HAAfcGJ9lDMNYDhQ00+RK4F3DMOoMw1gDdDBNM9Y90VmvpfwYhrGq4TlFO6vJTvQdgHuAz4H2VG8Ap/JzI7DAMIzs+vbtJkdO5KYOCKt/7Rda37baHbFZzTCMgw2zjIZhlADbgW5NmrXLuuxMbtp5TXam74CH12VnBpPdgL3Hfb+Pkx9oYxvDMKqBIiC6NQL0cM7k5ni3AN+c1og8S4v5MU1zBBBvGMYSdwbmAZzpO32BvqZprjRNc039ss/2wpn8/B34nWma+4CvsRVbcb0utWftrSY3yzTNbsDVtJ9ZE1f1BSJN01xmmuYG0zRnWB2QB3kFGIDtTb1k4F7DMGqtDcn9TNPsCQzn5JVW7b4uN5Ob47XbmuwoP2dCXdYGPG5imubvgLOBf1odi6cwTdMbeAGYaXUsHsoX25KYMcANwJv1y6zE5gZgnmEYcdiuQ3mvvk+JtMg0zbHYXrj81epYPMiLwF/b4yDASb7Y9oaYAkwAZpmm2dfakDzGBGAz0BUYBrximmZ4czdoa0zTDMU2e3SfYRjFVsfjSZzJTXuuyS3k50U8vC4788JrPxB/3Pdx9T+z28Y0TV9sS84Ot0aAHs6Z3GCa5mXAI9ius6hwU2yeoKX8hAGDgWWmaWZiWy++yDTNs90WoXWc6Tv7gEWGYVQZhrEHSMM2uGwPnMnPLcAnAIZhrAYCgRi3ROfZnKpL7ZlpmonAW8CVhmG0h3OVs84GPqqvx9cCs03TvMrSiDzLPuBbwzCOGoaRDywHhlock6f4A7YlwHWGYaRjuw6uv8UxuY1pmn7YBgPzDcNYYKdJu63LTuSmXddkJ/Lj8XXZmd1c1wF9TNNMwNbxr8d23cDxFgG/x7bL0LXAT4Zh1LVmoB6qxdyYpjkcmANMbE/XV9RrNj+GYRRx3It/0zSXAQ+2k91cnXleLcQ2+/aOaZox2JZY7XZnkBZyJj/ZwDhgnmmaA7ANJvPcGqVnWgTcbZrmR8C5QJFhGActjslj1O8CvAC4yTCMNKvj8SSGYSQ0/N80zXnAYsMwFloWkOf5EtuMmy/gj+359W9rQ/IYDfX4Z9M0OwP9aCfnq/rrRN8GthuG8YKDZu2yLjuTm/Zck53Jz5lQl1scTBqGUW2a5t3At9i2359rGEaKaZqPA+sNw1iELRHvmaaZju2i6+tPZ9Cewsnc/BPbxeifmqYJkG0YxjTLgnYjJ/PTLjmZm2+B8aZppgI1wF/ayzt2TuZnJralv/dj2/zh5vbwJpZpmh9iW/ocU3+9qIHtYwowDON1bNePTgbSsW1B/wdrIrWGE/l5DNs1/bPra3K1YRjtYTWEM7lp11rKj2EY203T/C+wFajF9pFF26yK152c6Dv/wPbGXjK2j3j4a/3sbXtwIXATkGya5ub6n/0N28ektPe67Exu2m1Nxrn8eDyvuro2/9pLREREREREWpk2qxARERERERGXaTApIiIiIiIiLtNgUkRERERERFymwaSIiIiIiIi4TINJERERERERcZkGkyIiIiIiIuIyDSZFRERERETEZf8fGn1gD5ZOGwAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1152x72 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loader = DataLoader(map_dataset, batch_size=4, num_workers=1)\n",
    "plot_timings(loader, n_batches=4, model_time=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "extended-representative",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x108 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "loader = DataLoader(map_dataset, batch_size=4, num_workers=2)\n",
    "plot_timings(loader, n_batches=4, model_time=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "chicken-clear",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
